[로그인]
    git 설치후
    폴더 파일 열어서
    git config --global user.email "이메일"
    git config --global user.name "이름"

[시작하기]
    시작은 git init부터 시작 // 자세히 말하자면 repository를 생성해주는 것.

    git add 파일이름 // 일부만 스테이징 할때, 이걸로 골라서 한다. (스테이징 단어 중요)
    git commit -m '남길메시지' // repository에 저장이라는데, 일단 실질적 저장
    git add . // 싹다 스테이징 (편함).
    git log --oneline // 커밋 내역 확인 (근데 VSC으로 플러그인 설치해서 편하게 확인가능.)

    요약 : add로 선택하고 commit으로 모두 저장.

[상태확인]
    git status // 현재 위치 확인

[브랜치]
    git branch 작명 // 복사본 만들어서 작업하기
    git switch 작명 // 작명으로 이동하기
    git status // 현재 작업 위치 확인 ( 이걸로 branch로 잘 이동했는지 확인 할 수 있음 )

    똑같이스테이징 하고 커밋도 할 수 있음
    요약 : 복사본 만들어서 작업하기

[머지] // 합치는 기능
    브랜치코드를 main 브랜치에 합친다. 머지라고 부름

    git merge 복사본이름 // main에서 사용

    git branch -d 작명 // merge완료된 브랜치는 삭제
    git branch -D 작명 // merge안한 브랜치 삭제 (대문자)

[3-way merge ( 용어 )]
    각 브랜치에 신규 commit이 있을 경우, 합칠 때 3-way merge라고 한다.

[Fast-forward merge]
    기준 브랜치(main)에 신규 commit이 없을 경우, 만들었던 commit을 main으로 만드는 것을 fast-forward merge라고 한다.

[강제로 Fast-forward merge를 3-way merge로 변환]
    Fast-forward merge는 신규 commit이 없을 경우, 자동으로 실행되는 것이다.
    이때 fast-forwar가 싫어서 강제로 3-way merge를 하고 싶으면 다음 명령어를 입력하면 된다.
    git merge --no-ff 브랜치명

[rebase merge] // branch 생성 위치 바꾸기
    main branch에 신규 commit이 있어서 fast-forward merge를 하지 못할 때 fast-forward merge를 사용하기 위해서 시작 위치를 바꾼다.
    근본적인 이유 : 나중에 branch를 많이 만들어서 merge 기록이 너무 많으면 복잡해보이기 때문에 간단한 branch같은 경우에는 rebase를 해서 깔끔하게 한다.
    단점 : conflict가 많이 발생할 수도 있다. // 수정사항이 많이 뜰 수도 있다는 이야기 같음.
    사용법은 5~7번 예시 사진 참고

[squash and merge] // 만들었던 branch 다 합쳐서 merge해서 기록 남기지 않기
    사용 이유 : rebase merge와 마찬가지로 main branch 로그를 출력했을 때 잡다한 branch merge 기록을 남기지 않기 위함.
    사용법은 다음 명령어를 입력하면 된다.
    git merge --squash 새브랜치작명
    @@잘모르겠음 안되던데 rebase쓰면 되지 않음?

[최근 커밋으로 복구하는 법]
    git restore 파일명

[특정 커밋으로 복구하는 법]
    git restore --source 커밋아이디 파일명
    ex) git restore --source f6d0291 0.Scene

[특정 파일 스테이징 취소]
    git restore --staged 파일명

[특정 commit 취소]
    불가능함. 과거를 취소하는 것은 안되지만 특정 commit에서 작업한 것을 제거한 commit은 생성가능. // 사실상 삭제.
    git revert 커밋아이디
    ex) git revert d3g0493
    *Vim 에디터뜨면 i로 입력 :wq로 저장 후 닫기 // 콜론 입력하는 거임

[특정 commit 여러개 취소]
    git revert 커밋아이디1 커밋아이디2

[최근 commit 취소]
    git revert HEAD

[과거로 모든 것을 되돌리기]
    git reset --hard 커밋아이디 // 근데 극단적인 명령어라 협업시엔 사용 금지.

[리셋하는데 변동사항 지우지 말고 스테이징해놓기]
    git reset --soft 커밋아이디

[변동사항 지우지 말고 unstage 해놓기]
    git reset --mixed 커밋아이디
    "mixed라는 옵션도 있습니다. 이러면은 이제 변경사항들이 스테이징 되지 않은 상태로 나와있습니다."
    "그러면 이거를 이제 여러분들이 git add 하고 commit하거나 그럴 수 있는거에요."
    라고 말했는데 안써봐서 잘 모르겠음.

    -끝-